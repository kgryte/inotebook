'use strict';

// MODULES //

var fs = require( 'fs' ),
	path = require( 'path' ),
	copy = require( 'utils-copy' ),
	merge = require( 'utils-merge2' )(),
	isString = require( 'validate.io-string-primitive' ),
	isObject = require( 'validate.io-object' ),
	root = require( 'root' );


// VARIABLES //

var CONFIG = require( './default.json' );


// FUNCTIONS //

/**
* FUNCTION: config()
*	Loads a configuration file based on the current Node environment.
*
* @private
*/
function config() {
	var filepath;

	// Process environment variables...
	CONFIG.env = process.env.NODE_ENV || CONFIG.env;

	// Override default configuration settings based on the run-time environment...
	filepath = 'etc/' + CONFIG.env + '.json';
	filepath = path.join( root, filepath );
	if ( fs.existsSync( filepath ) ) {
		merge( CONFIG, require( filepath ) );
	}
} // end FUNCTION config()


// INIT //

config();


// CONFIG //

/**
* FUNCTION: Config()
*	Config constructor.
*
* @constructor
* @returns {Config} Config instance
*/
function Config() {
	if ( !( this instanceof Config ) ) {
		return new Config();
	}
	return this;
} // end FUNCTION Config()

/**
* METHOD: get( [keypath] )
*	Returns a configuration object. If no `keypath` is provided, returns a copy of the application configuration. If a `keypath` is provided, returns the sub-configuration corresponding to the provided key path. If no sub-configuration exists, the method returns `null`.
*
* @param {String} [keypath] - key path (nested keys should be dot delimited; e.g., 'ssl.enabled'. )
* @returns {Object|Null} configuration object or null
*/
Config.prototype.get = function( keypath ) {
	var keys,
		key,
		tmp,
		len,
		i;
	if ( !arguments.length ) {
		return copy( CONFIG );
	}
	if ( !isString( keypath ) ) {
		throw new TypeError( 'get()::invalid input argument. Key path must be a string. Value: `' + keypath + '`.' );
	}
	keys = keypath.split( '.' );
	len = keys.length;
	tmp = CONFIG;
	for ( i = 0; i < len; i++ ) {
		key = keys[ i ];
		if ( !tmp.hasOwnProperty( key ) ) {
			return null;
		}
		tmp = tmp[ key ];
	}
	return copy( tmp );
}; // end METHOD get()

/**
* FUNCTION: merge( config )
*	Merges a configuration object with the application configuration.
*
* @param {Object} config - configuration object
* @returns {Config} Config instance
*/
Config.prototype.merge = function( config ) {
	if ( !isObject( config ) ) {
		throw new TypeError( 'merge()::invalid input argument. Must provide an object. Value: `' + config + '`.' );
	}
	merge( CONFIG, config );
	return this;
}; // end METHOD merge()


// EXPORTS //

module.exports = new Config(); // singleton
